def compute_ce_vectors(simulations, time_steps, usafe_set_star, direction):
    results = []
    ce_vectors = []
    for simulation in simulations:
        usafe_points = []
        ce_vector = []
        for time in time_steps:
            point = simulation[int(time)]
            usafe_lpi = LpInstance(usafe_set_star.num_dims, usafe_set_star.num_dims)
            usafe_lpi.update_basis_matrix(usafe_set_star.basis_matrix)
            identity_matrix = np.identity(usafe_set_star.num_dims)
            for dim in range(identity_matrix.ndim):
                lc = LinearConstraint(identity_matrix[dim], point[dim])
                usafe_lpi.add_basis_constraint(lc.vector, lc.value)
                lc = LinearConstraint(-1 * identity_matrix[dim], -point[dim])
                usafe_lpi.add_basis_constraint(lc.vector, lc.value)

            for constraints in usafe_set_star.constraint_list:
                usafe_lpi.add_basis_constraint(constraints.vector, constraints.value)

            direction = np.zeros(usafe_set_star.num_dims)
            usafe_point = np.zeros(usafe_set_star.num_dims)
            is_feasible = usafe_lpi.minimize(direction, usafe_point, error_if_infeasible=False)
            usafe_points.append(usafe_point)
            if is_feasible:
                ce_vector.append(1)
            else:
                ce_vector.append(0)

        ## Do we need the simulation points?
        results.append(usafe_points)
        ce_vectors.append(ce_vector)

    return ce_vectors

def compute_longest_counterexample(ce_vectors, time_steps, usafe_basis_predicates_list, init_star, direction):

    longest_ce_indices = []
    for ce_vector in ce_vectors:
        usafe_lpi = LpInstance(init_star.num_dims, init_star.num_dims)
        length  = 0
        time_step_indices = [0,0]
        start_index = 0
        end_index = 0
        index = [0,0]
        max_len = 0
        current_index = 0
        while (current_index < len(ce_vector)):
            if ce_vector[current_index] == 1:
                if length == 0:
                    usafe_lpi = LpInstance(init_star.num_dims, init_star.num_dims)
                    usafe_lpi.update_basis_matrix(init_star.basis_matrix)
                    for lc in init_star.constraint_list:
                        usafe_lpi.add_basis_constraint(lc.vector, lc.value)
                    start_index = current_index

                usafe_basis_predicates = usafe_basis_predicates_list[current_index]
                result = np.zeros(init_star.num_dims)
                for usafe_basis_predicate in usafe_basis_predicates:
                    usafe_lpi.add_basis_constraint(usafe_basis_predicate.vector, usafe_basis_predicate.value)
                is_feasible = usafe_lpi.minimize(direction, result, error_if_infeasible=False)
                if is_feasible:
                    length = length + 1
                    end_index = current_index
                else:
                    current_index = start_index+1
                    length = 0

                if max_len < length:
                    max_len = length
                    index[0] = start_index
                    index[1] = end_index
            else:
                length = 0
            current_index = current_index + 1
        time_step_indices[0] = time_steps[index[0]]
        time_step_indices[1] = time_steps[index[1]]
        longest_ce_indices.append(time_step_indices)
    return longest_ce_indices


def populate_error_stars_info(error_stars, num_dims):

    #with open(usafe_stars_filename, 'r') as csvfile:
    #    reader = csv.reader(csvfile)
    #    usafe_stars_table = [[float(e) for e in r] for r in reader]

    usafe_basis_matrices = []
    usafe_centers = []
    usafe_steps = []
    usafe_modes = []

    for error_star in error_stars:
        usafe_basis_matrices.append(error_star.basis_matrix)
        usafe_centers.append(error_star.center)
        usafe_steps.append(error_star.total_steps)
        usafe_modes.append(error_star.mode)

    ## Extras: one row for the center and one for the step
    ## beside num_dims for the basis matrix
    #extras = 2
    #rows_per_star = extras + num_dims
    #row_index = 0
    #row_number = 0

    ## Populate the information (basis matrices, centers and the steps)
    #for row in usafe_stars_table:
    #    row_index = row_number % rows_per_star
    #    if row_index == 0:
    #        temp_basis_matrix = np.ndarray(shape=(num_dims, num_dims), dtype=float)
    #        usafe_steps.append(row[0])
    #    elif row_index == 1:
    #        usafe_centers.append(row)
    #    else:
    #        temp_basis_matrix[row_index - extras] = row

    #   if row_index + 1 == rows_per_star:
    #        usafe_basis_matrices.append(temp_basis_matrix)
    #    row_number = row_number + 1
    return usafe_basis_matrices, usafe_centers, usafe_steps, usafe_modes


 ## Computes the preimage of a point in the unsafe set

## Inputs:
## 1) settings
## 2) init_star
## 3) usafe_star
def compute_counter_examples(error_stars, init_star, usafe_set_star, direction):

    ## Populate error stars info
    usafe_basis_matrices = []
    usafe_centers = []
    usafe_steps = []
    usafe_modes = []

    for error_star in error_stars:
        usafe_basis_matrices.append(error_star.basis_matrix)
        usafe_centers.append(error_star.center)
        usafe_steps.append(error_star.total_steps)
        usafe_modes.append(error_star.mode)

    # List of feasible solutions/initial points
    initial_points = []
    usafe_basis_predicates_list = []

    ## Iterate over the stars which intersect with the unsafe set
    ## Eventually there is going to be just one star at a particular
    ## time step that user is interested in.
    for index in xrange(len(usafe_basis_matrices)):

        basis_matrix = usafe_basis_matrices[index]
        center = usafe_centers[index]
        ## Create an LP instance
        usafe_lpi = LpInstance(usafe_set_star.num_dims, usafe_set_star.num_dims)
        usafe_lpi.update_basis_matrix(usafe_set_star.basis_matrix)
        usafe_basis_predicates = []
        usafe_set_constraints = usafe_set_star.constraint_list
        for usafe_set_lc in usafe_set_constraints:

            ## To correctly compute the dot product
            lc_t = usafe_set_lc.vector.T

            ## Translating usafe set star into the simulation/star's basis
            new_lc_vector = np.dot(basis_matrix, lc_t)
            new_lc_value = usafe_set_lc.value - np.dot(lc_t, center)
            usafe_basis_predicates.append(LinearConstraint(new_lc_vector, new_lc_value))

        ## List of predicates for each time step where our standard star intersects with the unsafe set
        ## To be used while computing the longest subsequence.
        usafe_basis_predicates_list.append(usafe_basis_predicates)

        for predicate in usafe_basis_predicates:
            usafe_lpi.add_basis_constraint(predicate.vector, predicate.value)

        ## Add init star basis constraints to the usafe linear constraints list
        for lc in init_star.constraint_list:
            usafe_lpi.add_basis_constraint(lc.vector, lc.value)

        ## Update the basis matrix
        usafe_lpi.update_basis_matrix(init_star.basis_matrix)
        result = np.zeros(usafe_set_star.num_dims)

        is_feasible = usafe_lpi.minimize(direction, result,  error_if_infeasible=False)

        ## This gives us a point, if any, in the initial set which leads to an unsafe point at a given time step.
        if is_feasible:
            initial_points.append(np.dot(init_star.basis_matrix.T, result))

    counterExamples = []
    unique_initial_points = []
    for index_i in range(len(initial_points)):
        not_unique = False
        for index_u in range(len(unique_initial_points)):
            out = np.zeros(usafe_set_star.num_dims)
            if (np.subtract(unique_initial_points[index_u], initial_points[index_i]) == out).all():
                not_unique = True
                break
        if not not_unique:
            counterExample = CounterExample(initial_points[index_i], usafe_basis_predicates_list, usafe_steps, usafe_modes)
            counterExamples.append(counterExample)
            unique_initial_points.append(initial_points[index_i])
    return counterExamples

def compute_ce_depth(error_stars, init_star, usafe_set_star, direction):

    ## Populate error stars info
    usafe_basis_matrices = []
    usafe_centers = []
    usafe_steps = []
    usafe_modes = []

    for error_star in error_stars:
        usafe_basis_matrices.append(error_star.basis_matrix)
        usafe_centers.append(error_star.center)
        usafe_steps.append(error_star.total_steps)
        usafe_modes.append(error_star.mode)

    points = []
    for basis_matrix in usafe_basis_matrices:

        ## Create an LP instance
        usafe_lpi = LpInstance(usafe_set_star.num_dims, usafe_set_star.num_dims)
        usafe_lpi.update_basis_matrix(basis_matrix)

        ## Add init star basis constraints to the usafe linear constraints list
        for lc in init_star.constraint_list:
            usafe_lpi.add_basis_constraint(lc.vector, lc.value)

        for lc in usafe_set_star.constraint_list:
            usafe_lpi.add_standard_constraint(lc.vector, lc.value)

        result = np.zeros(usafe_set_star.num_dims)

        is_feasible = usafe_lpi.minimize(-1*direction, result, error_if_infeasible=False)

        if is_feasible:
            points.append(np.dot(usafe_set_star.basis_matrix.T, result))

    return points

 def check_if_feasible(self, usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_index, end_index):

        ## Create an LP instance
        usafe_lpi = LpInstance(self.num_dims, self.num_dims)
        usafe_lpi.update_basis_matrix(self.init_star.basis_matrix)

        for pred in usafe_basis_preds:
            usafe_lpi.add_basis_constraint(pred.vector, pred.value)

        for idx in xrange(len(usafe_basis_preds_in_init_mode)):

            if idx >= start_index and idx <= end_index:
                for pred in usafe_basis_preds_in_init_mode[idx]:
                    lc_t = pred.vector.T
                    new_lc_vector = np.dot(error_star.basis_matrix.T, lc_t)
                    new_lc_value = pred.value - np.dot(lc_t, error_star.center)
                    lc = LinearConstraint(new_lc_vector, new_lc_value)
                    usafe_lpi.add_basis_constraint(lc.vector, lc.value)

        for pred in self.init_star.constraint_list:
            usafe_lpi.add_basis_constraint(pred.vector, pred.value)

        result = np.zeros(self.num_dims)
        direction = np.zeros(self.num_dims)

        is_feasible = usafe_lpi.minimize(direction, result, error_if_infeasible=False)

        return is_feasible

    def compute_indices(self, usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_index, end_index):

        indices = [-1]
        if end_index < start_index:
            return indices

        mid = (start_index + end_index)/2

        is_mid_feasible = self.check_if_feasible(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, mid, mid)

        left_indices = self.compute_indices(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_index, mid-1)
        right_indices = self.compute_indices(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, mid+1, end_index)

        if not is_mid_feasible:
            indices = left_indices
            indices.append(-1)
            for index in right_indices:
                indices.append(index)
        else:
            if left_indices[len(left_indices) -1 ] == (mid -1) and right_indices[right_indices[0]] == (mid + 1):
                start_idx = left_indices[len(left_indices) -1]
                end_idx = right_indices[0]
                for idx in reversed(left_indices):
                    if idx == -1:
                        break
                    start_idx = idx
                for idx in right_indices:
                    if idx == -1:
                        break
                    end_idx = idx
                is_feasible = self.check_if_feasible(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_idx, end_idx)
                if is_feasible:
                    indices = left_indices
                    indices.append(mid)
                    for index in right_indices:
                        indices.append(index)

            elif (left_indices[len(left_indices) - 1] == (mid-1)):
                start_idx = left_indices[len(left_indices) - 1]
                for idx in reversed(left_indices):
                    if idx == -1:
                        break
                    start_idx = idx
                end_idx = mid
                is_feasible = self.check_if_feasible(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_idx, end_idx)
                if is_feasible:
                    indices = left_indices
                    indices.append(mid)

            elif (right_indices[right_indices[0]] == (mid+1)):
                start_idx = mid
                end_idx = right_indices[0]
                for idx in right_indices:
                    if idx == -1:
                        break
                    end_idx = idx
                is_feasible = self.check_if_feasible(usafe_basis_preds, error_star, usafe_basis_preds_in_init_mode, start_idx, end_idx)
                if is_feasible:
                    indices[0] = mid
                    for index in right_indices:
                        indices.append(index)
            else:
                indices[0] = mid

        return indices


    def compute_longest_ce(self):

        ## Maintain the information of the modes and the respective time steps of their error stars
        error_star_modes = []
        error_stars_list_per_mode = []
        prev_mode_name = None
        error_stars_list_for_prev_mode = []
        for error_star in self.error_stars:
            if error_star.mode.name != prev_mode_name:
                if prev_mode_name != None:
                    error_stars_list_per_mode.append(error_stars_list_for_prev_mode)
                prev_mode_name = error_star.mode.name
                error_star_modes.append(error_star.mode.name)
                error_stars_list_for_prev_mode = []
                error_stars_list_for_prev_mode.append(error_star.clone())
            else:
                error_stars_list_for_prev_mode.append(error_star.clone())

        error_stars_list_per_mode.append(error_stars_list_for_prev_mode)

        usafe_intersect_basis_preds_list_per_mode = []
        for error_stars_list in error_stars_list_per_mode:
            usafe_intersect_basis_preds_list = []
            for error_star in error_stars_list:
                usafe_intersect_basis_preds = self.compute_usafe_basis_pred_and_intersection_in_star_basis(error_star.basis_matrix, error_star.center, True, error_star)
                usafe_intersect_basis_preds_list.append(usafe_intersect_basis_preds)
            usafe_intersect_basis_preds_list_per_mode.append(usafe_intersect_basis_preds_list)

        usafe_intersect_basis_pred_in_init_mode = usafe_intersect_basis_preds_list_per_mode[0]
        my_indices = []
        for index in xrange(len(usafe_intersect_basis_preds_list_per_mode[1])):
            usafe_intersect_basis_preds = usafe_intersect_basis_preds_list_per_mode[1][index]
            error_star = error_stars_list_per_mode[1][index]
            indices = self.compute_indices(usafe_intersect_basis_preds, error_star, usafe_intersect_basis_pred_in_init_mode, 0, len(usafe_intersect_basis_pred_in_init_mode)-1)
            my_indices.append(indices)
        return


    def if_error_stars_per_mode_feasible(self, error_stars_list_per_mode, usafe_intersect_basis_preds_list_per_mode):
        discrete_prestate_star = None
        basis_center = None
        for index in xrange(len(usafe_intersect_basis_preds_list_per_mode)):
            init_star_in_current_mode = error_stars_list_per_mode[index][0].parent.star

            ## Create an LP instance
            usafe_lpi = LpInstance(self.num_dims, self.num_dims)
            usafe_lpi.update_basis_matrix(init_star_in_current_mode.basis_matrix)

            ## These also represent the predicates of the current star
            for pred in init_star_in_current_mode.constraint_list:
                usafe_lpi.add_basis_constraint(pred.vector, pred.value)

            if index == 1:
                discrete_prestate_star = init_star_in_current_mode.parent.prestar
                basis_center = init_star_in_current_mode.parent.prestar_basis_center

            #init_usafe_basis_preds = self.compute_usafe_basis_pred_in_star_basis(init_star_in_current_mode.basis_matrix, init_star_in_current_mode.center)
            #for pred in init_usafe_basis_preds:
            #    usafe_lpi.add_basis_constraint(pred.vector, pred.value)

            for usafe_intersect_basis_pred in usafe_intersect_basis_preds_list_per_mode[index]:

                for pred in usafe_intersect_basis_pred:
                    usafe_lpi.add_basis_constraint(pred.vector, pred.value)

                result = np.zeros(self.num_dims)
                direction = np.zeros(self.num_dims)

                if discrete_prestate_star is not None:
                    init_star_in_prev_mode = discrete_prestate_star.parent.star
                    for pred in discrete_prestate_star.constraint_list:
                        usafe_lpi.add_basis_constraint(pred.vector, pred.value)
                    for pred in init_star_in_prev_mode.constraint_list:
                        usafe_lpi.add_basis_constraint(pred.vector, pred.value)
                    usafe_lpi.update_basis_matrix(init_star_in_prev_mode.basis_matrix)
                is_feasible = usafe_lpi.minimize(direction, result, error_if_infeasible=False)
                if is_feasible:
                    print "Found a feasible point"

        return is_feasible


    longest_subseqs = []
    ce_vectors = []
    for counterExample in counterExamples:
        init_point = counterExample.preimage_point
        index = 0

        simulation = []
        ce_vector = []
        longest_subseq = []
        sim_end_time = engine.error_modes_sim_end_time_step[index] - engine.error_modes_sim_start_time_step[index]

        simulation.append(compute_simulation(init_point, ha.modes['extension'].a_matrix, ha.modes['extension'].c_vector, post_verif_object.step, sim_end_time))

        #error_time_steps = np.array(post_verif_object.get_error_time_steps_in_mode(ha.modes['extension']))

        ce_vector.append(counterExample.compute_ce_vector(simulation[index], post_verif_object.usafe_set_constraint_list, direction, engine.error_modes_sim_start_time_step[index], index))
        longest_subseq.append(counterExample.compute_longest_sequence(ce_vector[index], post_verif_object.init_star, direction, index))
        for transition in ha.modes['extension'].transitions:
            if (transition.from_mode.name == 'extension') and (transition.to_mode.name == 'freefall'):
                condition_list = transition.condition_list

        init_point = simulation[index][sim_end_time]

        is_feasible = True
        for condition in condition_list:
            val = np.dot(condition.vector, init_point)
            if val > condition.value:
                is_feasible = False
                break

        if not is_feasible:
            continue

        index  = index + 1
        sim_end_time = engine.error_modes_sim_end_time_step[index] - engine.error_modes_sim_start_time_step[index]

        simulation.append(compute_simulation(init_point, ha.modes['freefall'].a_matrix, ha.modes['freefall'].c_vector, post_verif_object.step, sim_end_time))
        ce_vector.append(counterExample.compute_ce_vector(simulation[index], post_verif_object.usafe_set_constraint_list, direction, engine.error_modes_sim_start_time_step[index], index))
        longest_subseq.append(counterExample.compute_longest_sequence(ce_vector[index], post_verif_object.init_star, direction, index))
        longest_subseqs.append(longest_subseq)
        ce_vectors.append(ce_vector)

    print "long subsequences: '{}'".format(longest_subseqs)

    ## Working routine for linear continuous systems
     def compute_deepest_ce_old(self, depth_direction):

        Timers.tic('Deepest counter-example')

        ## Populate error stars info
        error_star_basis_matrices = []
        error_star_centers = []
        error_star_steps = []
        error_star_modes = []

        for error_star in self.error_stars:
            error_star_basis_matrices.append(error_star.basis_matrix)
            error_star_centers.append(error_star.center)
            error_star_steps.append(error_star.total_steps)
            error_star_modes.append(error_star.mode)

        points = []
        star_indices = []
        for index in xrange(len(self.error_stars)):

            basis_matrix = self.error_stars[index].basis_matrix
            ## Create an LP instance
            usafe_lpi = LpInstance(self.num_dims, self.num_dims)
            usafe_lpi.update_basis_matrix(basis_matrix)

            ## Add init star basis constraints to the usafe linear constraints list
            ## Since init_star predicates (P) also reprsents error_star predicate
            for lc in self.error_stars[index].constraint_list:
                usafe_lpi.add_basis_constraint(lc.vector, lc.value)

            for lc in self.usafe_set_constraint_list:
                usafe_lpi.add_standard_constraint(lc.vector, lc.value)

            result = np.zeros(self.num_dims)

            is_feasible = usafe_lpi.minimize(-1 * depth_direction, result, error_if_infeasible=False)

            usafe_set_basis_matrix = np.identity(self.num_dims)
            if is_feasible:
                points.append(np.dot(usafe_set_basis_matrix, result))
                star_indices.append(index)

        if len(points) is 0:
            Timers.toc('Deepest counter-example')
            return
        # Find the index of the error_star corresponding to the max_depth
        max_depth = np.dot(depth_direction, points[0])
        max_depth_index = 0
        for index in xrange(len(points)):
            point = points[index]
            depth = np.dot(depth_direction, point)
            if depth > max_depth:
               max_depth = depth
               max_depth_index = index

        ## Compute the counter example i.e., find the initial point, leading to the max_depth
        basis_matrix = error_star_basis_matrices[max_depth_index]
        center = error_star_centers[max_depth_index]
        ## Create an LP instance
        usafe_lpi = LpInstance(self.num_dims, self.num_dims)
        usafe_lpi.update_basis_matrix(self.init_star.basis_matrix)
        usafe_basis_predicates = []
        for usafe_set_lc in self.usafe_set_constraint_list:

            ## To correctly compute the dot product
            lc_t = usafe_set_lc.vector.T

            ## Translating usafe set star into the simulation/star's basis
            new_lc_vector = np.dot(basis_matrix, lc_t)
            new_lc_value = usafe_set_lc.value - np.dot(lc_t, center)
            usafe_basis_predicates.append(LinearConstraint(new_lc_vector, new_lc_value))

        for predicate in usafe_basis_predicates:
            usafe_lpi.add_basis_constraint(predicate.vector, predicate.value)

        ## Add init star basis constraints to the usafe linear constraints list
        for lc in self.init_star.constraint_list:
            usafe_lpi.add_basis_constraint(lc.vector, lc.value)

        result = np.zeros(self.num_dims)
        new_direction = np.zeros(self.num_dims) ##Find the solution in any direction

        usafe_lpi.minimize(new_direction, result, error_if_infeasible=False)

        print "CounterExample: '{}' with depth '{}' in the given direction".format(result, max_depth)
        Timers.toc('Deepest counter-example')


        intervals_in_the_list = []
                interval_end_step = interval_start_step = error_star_list_for_longest_ce[final_max_length_sequence[len(final_max_length_sequence)-1]].total_steps
                interval = [0, 0]
                interval[1] = interval[0] = interval_start_step

                for idx in range(len(final_max_length_sequence)-2, -1, -1):
                    current_step = error_star_list_for_longest_ce[final_max_length_sequence[idx]].total_steps
                    if current_step is not interval_end_step+1:
                        #interval[1] = interval_end_step
                        intervals_in_the_list.append(interval)
                        interval = [0, 0]
                        interval[0] = current_step
                    interval[1] = current_step
                    interval_end_step = current_step
                intervals_in_the_list.append(interval)


def plot_reachable_set(vertices, longest_ce_simulation):

    codes = [Path.MOVETO,
             Path.LINETO,
             Path.LINETO,
             Path.LINETO,
             Path.CLOSEPOLY,
             ]

    ce_codes = [Path.MOVETO, Path.LINETO]

    fig = plt.figure()
    ax = fig.add_subplot(111)
    prev_ce_vert = longest_ce_simulation[0]
    for index in xrange(len(vertices)):
        poly_verts = vertices[index]
        path = Path(poly_verts, codes)
        patch = patches.PathPatch(path, edgecolor='green', facecolor='white', lw=1)
        ax.add_patch(patch)
        ce_verts = [(5, 5), (5, 5)]
        ce_verts[0] = prev_ce_vert
        ce_verts[1] = longest_ce_simulation[index]
        prev_ce_vert = longest_ce_simulation[index]
        ce_path = Path(ce_verts,ce_codes)
        ce_patch = patches.PathPatch(ce_path, edgecolor='red', facecolor='red', lw=2)
        ax.add_patch(ce_patch)

    ax.set_xlim(-7, 6)
    ax.set_ylim(-4, 6)
    plt.show()